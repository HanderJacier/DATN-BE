package DATN.service;

import DATN.dao.thanhtoan.HoaDonDAO;
import DATN.dao.thanhtoan.HoaDonChiTietDAO;
import DATN.dao.thanhtoan.ThanhToanDAO;
import DATN.dto.MoMoPaymentResponseDTO;
import DATN.dto.ThanhToanDTO;
import DATN.entity.thanhtoan.HoaDon;
import DATN.entity.thanhtoan.HoaDonChiTiet;
import DATN.entity.thanhtoan.ThanhToan;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class ThanhToanService {

    private final HoaDonDAO hoaDonDAO;
    private final HoaDonChiTietDAO hoaDonChiTietDAO;
    private final ThanhToanDAO thanhToanDAO;
    private final MoMoPaymentService moMoPaymentService;

    @Transactional(rollbackFor = Exception.class)
    public Map<String, Object> taoHoaDon(ThanhToanDTO thanhToanDTO) {
        Map<String, Object> response = new HashMap<>();

        // Validate input data
        if (thanhToanDTO == null || thanhToanDTO.getTaiKhoanId() == null) {
            response.put("success", false);
            response.put("message", "Th√¥ng tin t√†i kho·∫£n kh√¥ng h·ª£p l·ªá");
            return response;
        }

        if (thanhToanDTO.getDanhSachSanPham() == null || thanhToanDTO.getDanhSachSanPham().isEmpty()) {
            response.put("success", false);
            response.put("message", "Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return response;
        }

        if (thanhToanDTO.getTongTien() == null || thanhToanDTO.getTongTien().compareTo(BigDecimal.ZERO) <= 0) {
            response.put("success", false);
            response.put("message", "T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá");
            return response;
        }

        try {
            // T·∫°o h√≥a ƒë∆°n
            HoaDon hoaDon = createHoaDon(thanhToanDTO);
            HoaDon savedHoaDon = hoaDonDAO.save(hoaDon);

            // T·∫°o chi ti·∫øt h√≥a ƒë∆°n
            createHoaDonChiTiet(savedHoaDon, thanhToanDTO.getDanhSachSanPham());

            // X·ª≠ l√Ω thanh to√°n
            return processPayment(savedHoaDon, thanhToanDTO);

        } catch (Exception e) {
            // Log the error for debugging
            System.err.println("Error in taoHoaDon: " + e.getMessage());
            e.printStackTrace();
            
            // Rethrow as RuntimeException to trigger rollback
            throw new RuntimeException("L·ªói khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage(), e);
        }
    }

    private HoaDon createHoaDon(ThanhToanDTO thanhToanDTO) {
        HoaDon hoaDon = new HoaDon();
        hoaDon.setTaiKhoan(thanhToanDTO.getTaiKhoanId());
        hoaDon.setGiaHoaDon(thanhToanDTO.getTongTien());
        hoaDon.setTrangThai("PENDING");
        hoaDon.setNoiDung(thanhToanDTO.getGhiChu());
        
        return hoaDon;
    }

    private void createHoaDonChiTiet(HoaDon hoaDon, java.util.List<ThanhToanDTO.SanPhamThanhToanDTO> danhSachSanPham) {
        for (ThanhToanDTO.SanPhamThanhToanDTO sanPham : danhSachSanPham) {
            if (sanPham.getSanPhamId() == null || sanPham.getSoLuong() == null || sanPham.getDonGia() == null) {
                throw new IllegalArgumentException("Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá");
            }

            HoaDonChiTiet chiTiet = new HoaDonChiTiet();
            chiTiet.setHoaDon(hoaDon.getId());
            chiTiet.setSanPham(sanPham.getSanPhamId());
            chiTiet.setDonGia(sanPham.getDonGia());
            chiTiet.setSoLuong(sanPham.getSoLuong());
            hoaDonChiTietDAO.save(chiTiet);
        }
    }

    private Map<String, Object> processPayment(HoaDon hoaDon, ThanhToanDTO thanhToanDTO) {
        Map<String, Object> response = new HashMap<>();

        // T·∫°o thanh to√°n
        ThanhToan thanhToan = new ThanhToan();
        thanhToan.setHoaDon(hoaDon.getId());
        thanhToan.setPhuongThuc(thanhToanDTO.getPhuongThucThanhToan());
        thanhToan.setSoTien(thanhToanDTO.getTongTien());
        thanhToan.setTaiKhoan(thanhToanDTO.getTaiKhoanId());
       

        // X·ª≠ l√Ω theo ph∆∞∆°ng th·ª©c thanh to√°n
        if ("MOMO".equals(thanhToanDTO.getPhuongThucThanhToan())) {
            return processMoMoPayment(thanhToan, hoaDon, thanhToanDTO.getTongTien());
        } else if ("COD".equals(thanhToanDTO.getPhuongThucThanhToan())) {
            return processCODPayment(thanhToan, hoaDon);
        } else {
            response.put("success", false);
            response.put("message", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
            return response;
        }
    }

    private Map<String, Object> processMoMoPayment(ThanhToan thanhToan, HoaDon hoaDon, BigDecimal tongTien) {
        Map<String, Object> response = new HashMap<>();

        try {
            String orderId = "ORDER_" + hoaDon.getId() + "_" + System.currentTimeMillis();
            String orderInfo = "Thanh to√°n ƒë∆°n h√†ng #" + hoaDon.getId();
            Long amount = tongTien.longValue();

            System.out.println("üîÑ ƒêang t·∫°o thanh to√°n MoMo...");
            System.out.println("OrderId: " + orderId);
            System.out.println("Amount: " + amount);

            MoMoPaymentResponseDTO momoResponse = moMoPaymentService.createPayment(orderId, amount, orderInfo);

            if (momoResponse != null && momoResponse.getResultCode() == 0) {
                thanhToan.setMaGiaoDich(orderId);
                thanhToanDAO.save(thanhToan);

                response.put("success", true);
                response.put("message", "T·∫°o thanh to√°n MoMo th√†nh c√¥ng");
                response.put("hoaDonId", hoaDon.getId());
                response.put("payUrl", momoResponse.getPayUrl());
                response.put("qrCodeUrl", momoResponse.getQrCodeUrl());
                response.put("orderId", orderId);
            } else {
                // Log l·ªói MoMo ƒë·ªÉ debug
                String errorMessage = momoResponse != null ? 
                    "ResultCode: " + momoResponse.getResultCode() + ", Message: " + momoResponse.getMessage() : 
                    "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MoMo";
                
                System.err.println("‚ùå L·ªói MoMo: " + errorMessage);
                
                // Fallback to COD instead of throwing exception
                System.out.println("üîÑ Chuy·ªÉn sang thanh to√°n COD do l·ªói MoMo...");
                
                // Update payment method to COD
                thanhToan.setPhuongThuc("COD");
                thanhToan.setMaGiaoDich("COD_" + UUID.randomUUID().toString());
                thanhToanDAO.save(thanhToan);

                response.put("success", true);
                response.put("message", "Thanh to√°n MoMo t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang thanh to√°n khi nh·∫≠n h√†ng (COD).");
                response.put("hoaDonId", hoaDon.getId());
                response.put("paymentMethod", "COD");
                response.put("momoError", errorMessage);
            }
        } catch (Exception e) {
            System.err.println("‚ùå Exception trong MoMo payment: " + e.getMessage());
            e.printStackTrace();
            
            // Fallback to COD
            try {
                thanhToan.setPhuongThuc("COD");
                thanhToan.setMaGiaoDich("COD_" + UUID.randomUUID().toString());
                thanhToanDAO.save(thanhToan);

                response.put("success", true);
                response.put("message", "Thanh to√°n MoMo g·∫∑p s·ª± c·ªë. ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang thanh to√°n khi nh·∫≠n h√†ng (COD).");
                response.put("hoaDonId", hoaDon.getId());
                response.put("paymentMethod", "COD");
                response.put("error", e.getMessage());
            } catch (Exception fallbackError) {
                throw new RuntimeException("L·ªói x·ª≠ l√Ω thanh to√°n: " + e.getMessage(), e);
            }
        }

        return response;
    }

    private Map<String, Object> processCODPayment(ThanhToan thanhToan, HoaDon hoaDon) {
        Map<String, Object> response = new HashMap<>();

        try {
            thanhToan.setMaGiaoDich("COD_" + UUID.randomUUID().toString());
            thanhToanDAO.save(thanhToan);

            response.put("success", true);
            response.put("message", "ƒê·∫∑t h√†ng th√†nh c√¥ng. Thanh to√°n khi nh·∫≠n h√†ng");
            response.put("hoaDonId", hoaDon.getId());
        } catch (Exception e) {
            throw new RuntimeException("L·ªói x·ª≠ l√Ω thanh to√°n COD: " + e.getMessage(), e);
        }

        return response;
    }

    @Transactional(rollbackFor = Exception.class)
    public Map<String, Object> xacNhanThanhToan(String maGiaoDich, String trangThai) {
        Map<String, Object> response = new HashMap<>();

        if (maGiaoDich == null || maGiaoDich.trim().isEmpty()) {
            response.put("success", false);
            response.put("message", "M√£ giao d·ªãch kh√¥ng h·ª£p l·ªá");
            return response;
        }

        if (trangThai == null || trangThai.trim().isEmpty()) {
            response.put("success", false);
            response.put("message", "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");
            return response;
        }

        try {
            Optional<ThanhToan> thanhToanOpt = thanhToanDAO.findByMaGiaoDich(maGiaoDich);

            if (thanhToanOpt.isPresent()) {
                ThanhToan thanhToan = thanhToanOpt.get();
                
                thanhToan.setNgayThanhToan(LocalDateTime.now());
                thanhToanDAO.save(thanhToan);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n
                updateHoaDonStatus(thanhToan.getHoaDon(), trangThai);

                response.put("success", true);
                response.put("message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng");
            } else {
                response.put("success", false);
                response.put("message", "Kh√¥ng t√¨m th·∫•y giao d·ªãch");
            }

        } catch (Exception e) {
            System.err.println("Error in xacNhanThanhToan: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi x√°c nh·∫≠n thanh to√°n: " + e.getMessage(), e);
        }

        return response;
    }

    private void updateHoaDonStatus(Integer hoaDonId, String trangThaiThanhToan) {
        Optional<HoaDon> hoaDonOpt = hoaDonDAO.findById(hoaDonId);
        if (hoaDonOpt.isPresent()) {
            HoaDon hoaDon = hoaDonOpt.get();
            if ("SUCCESS".equals(trangThaiThanhToan)) {
                hoaDon.setTrangThai("PAID");
            } else {
                hoaDon.setTrangThai("CANCELLED");
            }
            hoaDonDAO.save(hoaDon);
        }
    }
}
